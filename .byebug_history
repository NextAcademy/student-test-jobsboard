c
@company.talent_requirements.each do |requirement| puts requirement.keys end
@company.talent_requirements.each do |requirement| puts requirement.key(1) end
@company.talent_requirements.each do |requirement| puts requirement.key end
@company.talent_requirements.each do |requirement| puts requirement.class end
@company.talent_requirements.each do |requirement| puts requirement end
@company.talent_requirements.each do |requirement| puts requirement.key end
@company.talent_requirements.each do |key, value| puts key+"1" end
@company.talent_requirements.each do |key, value| puts key end
@company.talent_requirements.each do |key, value| puts key byebug end
@company.talent_requirements.each do |key, value| puts key end
@company.talent_requirements
@company.talent_requirements.keys
@company.lulz
@company
c
n
@company
exit
n
json_forbidden
@user
generate_password
n
request.env["HTTP_TOKEN"]
request.env[:HTTP_TOKEN]
request.env["HTTP_TOKEN"]
request.env
request.env.http_token
request.env
request.http_token
request
request.body
request.header
request
c
request.body.read
request.body.methods
request.body.token
request.body.string.token
request.body.string
request.body
request
request.body
params
c
request.body.string.hash
request.body.string.ahsh
request.body.string.methods
request.body.string.form-data
request.body.string.token
request.body.string
request.body.methods.strings
request.body.methods.string
request.body.methods.open
request.body.methods
request.body
request.body.token
request.body
request.header
request
request.head
request.header
request.body
request.token
request
params
request
params
c
request.body.read.token
request.body.read
request.body.methods
request.body
request.body.inspect.inspect
request.body.inspect
request.body
request.methods
request.json
request
json
params
exit
paramsp:token
params
clear
c
'c
c
job_params
c
job_params
n
params
c
input
c
company_params
c
company
requirement
company.talent_requirements
company
c
company.talent_requirements
requirement
input
c
company.talent_requirements
c
Job.last
@company
n
params
c
company.attributes
company.columns
exit
company.talent_requirements
company
company_talent_requirement
company_talent_requirements
requirement
input
c
@papap
c
authorize 
authorize @company
authorize
c
n
@company
c
user_params
c
User.roles.keys.c
User.roles.keys
User.roles
c
edit_user_password_path
current_user
exit
c
term.keys.first.gsub(/[^0-9A-Za-z]/, '')
term.keys.first
term.keys
term
c
term != {}
c
term
c
term
c
term
c
term
c
term
c
term
c
term
c
term
c
term
c
term
c
term
c
job.employment_terms.count
job.employment_terms
job.employment_terms.pop
c
term.keys.first.gsub(/[^0-9A-Za-z]/, '')
term.keys.first.gsubterm.keys.first.gsub(/[^0-9A-Za-z]/, '')
term.keys.first.gsub
term.keys.first
term.keys
term
c
term
term.keys.first
c
exit
key.keys.methods
key
term
key
exit
term
c
p term.keys[0]
puts term.keys[0]
print term.keys[0]
puts term.keys[0]
term.keys[0]
term.keys[0].class
term.keys[0]
term.keys
term.keys.class
term.class
term.type
term
term.keys["{\"Freelance\\""]
term.keys["{\"Freelance\\""
term.keys
term.keys[]
term.keys[:Freelance]
term.keys
term.methods
term
c
@job.employment_terms
@job
c
z
@job.errors
@job.valid?.errors
@job.valid?
@job.save.errors
@job.save
@job
c
job_params
@job
c
Job.methods
Job.params
params
@job
c
current_user.admin?
c
@companies.count
@companies.nil?
@companies.nil
@companies
c
Company.where(status: 1).page(params[:page]).per(10).each
Company.where(status: 1).page(params[:page]).per(10)
Company.where(status: 1)
@companies
c
@companies
c
Company.all
@companies
c
company.status.to_sym
company.status.to_i.to_sym
company.status.to_sym
company.status.to_i
